# -*- coding: utf-8 -*-
"""insurance_dataset_deeplearning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HgPzb9JcsShxoOQrZOpwpWe1kbwd6m9U
"""

import tensorflow as tf
import pandas as pd
import matplotlib.pyplot as plt
from tensorflow import keras
from keras import layers

df=pd.read_csv('https://raw.githubusercontent.com/stedy/Machine-Learning-with-R-datasets/master/insurance.csv')

df.head()

df.info()

df.shape

insurance=pd.get_dummies(df)
insurance

X= insurance.drop('charges',axis=1)
y=insurance['charges']

X.shape



from sklearn.model_selection import train_test_split

X_train,X_test,y_train,y_test =train_test_split(X,y,test_size=0.15,random_state=1)

len(X),len(X_train),len(X_test)

insurance_model=keras.models.Sequential([
                                         keras.layers.Dense(20, input_shape=[11,],activation='relu'),
                                         keras.layers.Dense(1)
])

insurance_model.compile(optimizer=keras.optimizers.Adam(learning_rate=0.005),
                                    loss='mae',
                                    metrics=['mae'])

model_history=insurance_model.fit(X_train,y_train,epochs=10)

y_pred=insurance_model.predict(X_test)

from sklearn.metrics import r2_score
rsq=r2_score(y_test,y_pred)
print(rsq)

def model_pred(neur_first,neur_second,lr,ep):
    tf.random.set_seed(2)
    model=keras.models.Sequential([
                                   keras.layers.Dense(neur_first, input_shape=[11,],activation='relu'),
                                   keras.layers.Dense(neur_second,activation='relu'),
                                   #keras.layers.Dense(neur_third,activation='relu'),
                                   keras.layers.Dense(1)
    ])
    """ function to create model and do experiments"""
    model.compile(optimizer=keras.optimizers.Adam(learning_rate=lr),
                  loss='mae',
                  metrics=['mae'])
    model.fit(X_train,y_train,epochs=ep,verbose=0)
    y_pred=model.predict(X_test)
    score=model.evaluate(X_test,y_test)
    print('on evaluation the score is =',score)
    from sklearn.metrics import r2_score
    rSquared_value=r2_score(y_test,y_pred)
    print('rSquared_value is =',rSquared_value)

model_1=model_pred(neur_first=30,neur_second=20,lr=0.001,ep=50)

model_2=model_pred(neur_first=30,neur_second=30,lr=0.0001,ep=100)

model_3=model_pred(neur_first=20,neur_second=20,lr=0.001,ep=100)

model_4=model_pred(neur_first=20,neur_second=20,neur_third=3,lr=0.0001,ep=150)

model_5=model_pred(neur_first=20,neur_second=15,lr=0.008,ep=120)

model_6=model_pred(neur_first=20,neur_second=15,lr=0.01,ep=180)

model_7=model_pred(neur_first=20,neur_second=15,lr=0.02,ep=200)

model_8=model_pred(neur_first=15,neur_second=20,lr=0.01,ep=250)

model_9=model_pred(neur_first=20,neur_second=15,lr=0.02,ep=250)

model_10=model_pred(neur_first=20,neur_second=15,lr=0.05,ep=350)



"""best model is model_10 with 0.87 r squared value"""



